# Staging environment values for calculaud-be on EKS
# This environment is used for main branch deployments for integration testing

# Moderate scaling for staging testing
replicaCount: 2

# Use ECR with specific integration tag
image:
  repository: "<ACCOUNT>.dkr.ecr.<REGION>.amazonaws.com/calculaud-be"
  tag: "staging-latest"
  pullPolicy: Always

# Integration environment configuration
config:
  debug: false
  environment: "staging"
  maxFileSizeMb: 256
  defaultPageSize: 50

# External PostgreSQL (RDS or external)
postgresql:
  external:
    host: "calculaud-staging.cluster-xxx.us-east-1.rds.amazonaws.com"
    port: 5432
    username: "calculaud"
    password: ""  # Set via external secrets
    database: "calculaud_staging"

# S3 configuration for integration
s3:
  accessKeyId: ""  # Set via IRSA or external secrets
  secretAccessKey: ""  # Set via IRSA or external secrets
  region: "us-east-1"
  endpointUrl: ""  # Use default AWS S3
  bucketName: "calculaud-staging-files"
  bucketUrl: ""  # Auto-constructed
  keyPrefix: "files/"
  useSsl: true
  storageClass: ""

# Authentication configuration for integration
auth:
  jwksUrl: "https://your-auth-provider/.well-known/jwks.json"
  issuer: "https://your-auth-provider/"
  audience: "calculaud-api"
  algorithm: "RS256"
  tokenEndpointUrl: "https://your-auth-provider/oauth/token"
  oidcUrl: "https://your-auth-provider/"
  
  oauth:
    clientId: "calculaud-staging-client"
    scopes: "openid profile email"

# Service configuration for EKS
service:
  type: ClusterIP
  port: 80
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "alb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"

# Ingress with ALB for integration
ingress:
  enabled: true
  className: "alb"
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:<REGION>:<ACCOUNT>:certificate/<CERT-ID>"
  hosts:
    - host: "api-staging.calculaud.com"
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: calculaud-staging-tls
      hosts:
        - "api-staging.calculaud.com"

# Resource configuration for staging workload
resources:
  requests:
    memory: "512Mi"
    cpu: "200m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# Enable autoscaling for staging
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 8
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node selection for EKS
nodeSelector:
  kubernetes.io/arch: amd64
  node.kubernetes.io/instance-type: "m5.large"

# Tolerations for EKS nodes
tolerations: []

# Anti-affinity for high availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - calculaud-be
        topologyKey: kubernetes.io/hostname

# Rolling update strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 2
    maxUnavailable: 0

# Health checks optimized for staging
healthcheck:
  liveness:
    path: /health/live
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readiness:
    path: /health/ready
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3
  startup:
    path: /health/startup
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 10

# Enable metrics for monitoring
metrics:
  enabled: true

# Staging environment variables
extraEnvVars:
  - name: LOG_LEVEL
    value: "INFO"
  - name: ENVIRONMENT
    value: "staging"
  - name: WORKERS
    value: "4"
  - name: PROMETHEUS_MULTIPROC_DIR
    value: "/tmp/prometheus"

# Pod annotations for monitoring
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

# Extra volumes for metrics
extraVolumes:
  - name: prometheus-metrics
    emptyDir: {}

extraVolumeMounts:
  - name: prometheus-metrics
    mountPath: /tmp/prometheus

# Security context for EKS
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

# Use external secrets for staging
existingSecret: "calculaud-staging-secrets"

# EKS-specific configurations
aws:
  region: "us-east-1"
  
  # Service Account for IRSA
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::<ACCOUNT>:role/calculaud-staging-service-role"