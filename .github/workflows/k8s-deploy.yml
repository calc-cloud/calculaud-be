# Kubernetes deployment workflow using Helm
# Deploys to different environments based on branch/tag

name: Deploy to Kubernetes

on:
  push:
    branches: 
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - pr
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
      pr_branch:
        description: 'Branch name for PR deployment (auto-detected if empty)'
        required: false
        default: ''

permissions:
  contents: read
  packages: read

jobs:
  # Determine deployment environment and image tag
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      image_tag: ${{ steps.env.outputs.image_tag }}
      namespace: ${{ steps.env.outputs.namespace }}
    steps:
    - name: Determine environment and image tag
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          
          # Handle PR environment branch naming
          if [[ "${{ github.event.inputs.environment }}" == "pr" ]]; then
            if [[ -n "${{ github.event.inputs.pr_branch }}" ]]; then
              BRANCH_NAME="${{ github.event.inputs.pr_branch }}"
            else
              BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
            fi
            
            # Sanitize branch name for Kubernetes namespace
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-50)
            echo "pr_branch_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          fi
        elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" ]]; then
          echo "environment=cleanup" >> $GITHUB_OUTPUT
          echo "image_tag=none" >> $GITHUB_OUTPUT
          
          # Get branch name for cleanup
          BRANCH_NAME="${{ github.head_ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-50)
          echo "pr_branch_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "image_tag=main-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "image_tag=none" >> $GITHUB_OUTPUT
        fi
        
        # Set namespace based on environment
        case "${{ steps.env.outputs.environment || 'none' }}" in
          staging)
            echo "namespace=calculaud-staging" >> $GITHUB_OUTPUT
            ;;
          pr)
            echo "namespace=calculaud-${{ steps.env.outputs.pr_branch_name }}" >> $GITHUB_OUTPUT
            ;;
          cleanup)
            echo "namespace=calculaud-${{ steps.env.outputs.pr_branch_name }}" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "namespace=calculaud-staging" >> $GITHUB_OUTPUT
            ;;
        esac

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.environment == 'staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl for staging cluster
      run: |
        echo "Configuring kubectl for staging cluster"
        # Add your staging cluster configuration here
        # For generic kubeconfig:
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to staging
      run: |
        # Deploy using simplified deployment script
        ./k8s/scripts/deploy.sh -e staging -n ${{ needs.setup.outputs.namespace }}
        
        # Override image tag if specified
        if [[ "${{ needs.setup.outputs.image_tag }}" != "latest" ]]; then
          helm upgrade calculaud-be k8s/helm/calculaud-be \
            --namespace ${{ needs.setup.outputs.namespace }} \
            --reuse-values \
            --set image.tag=${{ needs.setup.outputs.image_tag }}
        fi

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/calculaud-be -n ${{ needs.setup.outputs.namespace }}
        kubectl get pods -n ${{ needs.setup.outputs.namespace }} -l app.kubernetes.io/name=calculaud-be

  # Deploy to PR environment
  deploy-pr:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.environment == 'pr'
    environment: pr-deployment
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl for PR deployment
      run: |
        echo "Configuring kubectl for PR deployment"
        # Use staging cluster for PR deployments
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Create PR namespace
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ needs.setup.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to PR environment
      run: |
        # Deploy using deployment script with PR values
        ./k8s/scripts/deploy.sh -e pr -n ${{ needs.setup.outputs.namespace }}
        
        # Override image tag if specified
        if [[ "${{ needs.setup.outputs.image_tag }}" != "latest" ]]; then
          helm upgrade calculaud-be k8s/helm/calculaud-be \
            --namespace ${{ needs.setup.outputs.namespace }} \
            --reuse-values \
            --set image.tag=${{ needs.setup.outputs.image_tag }}
        fi

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/calculaud-be -n ${{ needs.setup.outputs.namespace }}
        kubectl get pods -n ${{ needs.setup.outputs.namespace }} -l app.kubernetes.io/name=calculaud-be

    - name: Get deployment info
      run: |
        echo "üöÄ PR Environment Deployed Successfully!"
        echo "Namespace: ${{ needs.setup.outputs.namespace }}"
        echo "Branch: ${{ needs.setup.outputs.pr_branch_name }}"
        echo "Image Tag: ${{ needs.setup.outputs.image_tag }}"
        
        # Get service info
        kubectl get svc -n ${{ needs.setup.outputs.namespace }}

  # Cleanup PR environment
  cleanup-pr:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.environment == 'cleanup'
    steps:
    - name: Configure kubectl for cleanup
      run: |
        echo "Configuring kubectl for PR cleanup"
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Cleanup PR environment
      run: |
        echo "üßπ Cleaning up PR environment: ${{ needs.setup.outputs.namespace }}"
        
        # Uninstall Helm release if it exists
        if helm list -n ${{ needs.setup.outputs.namespace }} | grep -q calculaud-be; then
          helm uninstall calculaud-be -n ${{ needs.setup.outputs.namespace }}
        fi
        
        # Delete namespace
        if kubectl get namespace ${{ needs.setup.outputs.namespace }} >/dev/null 2>&1; then
          kubectl delete namespace ${{ needs.setup.outputs.namespace }}
          echo "‚úÖ Cleaned up namespace: ${{ needs.setup.outputs.namespace }}"
        else
          echo "‚ÑπÔ∏è  Namespace ${{ needs.setup.outputs.namespace }} does not exist"
        fi

  # Notify on deployment completion
  notify:
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-pr, cleanup-pr]
    if: always() && needs.setup.outputs.environment != 'none'
    steps:
    - name: Deployment notification
      run: |
        if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-pr.result }}" == "success" || "${{ needs.cleanup-pr.result }}" == "success" ]]; then
          if [[ "${{ needs.setup.outputs.environment }}" == "cleanup" ]]; then
            echo "üßπ PR environment cleanup completed!"
            echo "Cleaned up namespace: ${{ needs.setup.outputs.namespace }}"
          else
            echo "‚úÖ Deployment to ${{ needs.setup.outputs.environment }} completed successfully!"
            echo "Environment: ${{ needs.setup.outputs.environment }}"
            echo "Image Tag: ${{ needs.setup.outputs.image_tag }}"
            echo "Namespace: ${{ needs.setup.outputs.namespace }}"
            if [[ "${{ needs.setup.outputs.environment }}" == "pr" ]]; then
              echo "Branch: ${{ needs.setup.outputs.pr_branch_name }}"
            fi
          fi
        else
          echo "‚ùå Operation failed"
          exit 1
        fi